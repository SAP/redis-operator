name: Trigger release

on:
  workflow_dispatch:
    inputs:
      version-bump:
        description: 'Whether to bump major, minor or patch version'
        required: false
        default: patch
        type: choice
        options:
        - major
        - minor
        - patch
      desired-version:
        description: 'Version to be released; if specified, version-bump will be ignored'
        required: false
        default: ''

concurrency: trigger-release

env:
  TAG_PREFIX: v
  INITIAL_TAG: v0.1.0
  SEMVER_VERSION: 3.4.0

defaults:
  run:
    shell: bash

jobs:
  release:
    name: Trigger release
    runs-on: ubuntu-22.04
    permissions:
      contents: write

    steps:
    - name: Validate ref
      run: |
        if [ "${{ github.ref }}" != refs/heads/main ]; then
          >&2 echo "Invalid ref: ${{ github.ref }} (expected: refs/heads/main)"
          exit 1
        fi

    - name: Checkout repository
      uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4
      with:
        token: ${{ secrets.WORKFLOW_USER_GH_TOKEN }}

    - name: Setup semver
      uses: ./.github/actions/setup-semver
      with:
        version: ${{ env.SEMVER_VERSION }}
        install-directory: ${{ runner.temp }}/bin

    - name: Determine current release
      id: get_current_release
      uses: ./.github/actions/get-highest-tag
      with:
        prefix: ${{ env.TAG_PREFIX }}

    - name: Determine target release
      id: get_target_release
      run: |
        desired_version=${{ inputs.desired-version }}
        current_version=${{ steps.get_current_release.outputs.version }}
        version_bump=${{ inputs.version-bump }}

        if [ -z "$desired_version" ]; then
          case $version_bump in
            major|minor|patch)
              # ok
              ;;
            *)
              >&2 echo "Invalid input: version-bump ($version_bump)."
              exit 1
          esac
          if [ -z "$current_version" ]; then
            version=${INITIAL_TAG/#$TAG_PREFIX/}
            tag=$INITIAL_TAG
          else
            version=$(semver bump $version_bump $current_version)
            tag=$TAG_PREFIX$version
          fi
        else
          if [[ $desired_version =~ ^$TAG_PREFIX([0-9].*)$ ]]; then
            version=${BASH_REMATCH[1]}
            tag=$desired_version
          else
            >&2 echo "Invalid input: desired-version ($desired_version) should start with $TAG_PREFIX."
            exit 1
          fi
          if [ "$(semver validate $version)" != valid ]; then
            >&2 echo "Invalid input: desired-version ($version) is not a valid semantic version."
            exit 1
          fi
          if [ "$(semver compare $version $current_version)" -le 0 ]; then
            >&2 echo "Invalid input: desired-version ($version) should be higher than current version ($current_version)."
            exit 1
          fi
        fi

        echo "Target version: $version"
        echo "Target tag: $tag"
        echo "version=$version" >> $GITHUB_OUTPUT
        echo "tag=$tag" >> $GITHUB_OUTPUT

    - name: Determine target commit
      id: get_target_commit
      run: |
        sha=$(git rev-parse HEAD)
        echo "Target commit: $sha"
        echo "sha=$sha" >> $GITHUB_OUTPUT

    - name: Wait for check suites to complete
      uses: sap-contributions/await-check-suites@master
      with:
        ref: ${{ steps.get_target_commit.outputs.sha }}
        intervalSeconds: 10
        timeoutSeconds: 1800
        failStepIfUnsuccessful: true
        appSlugFilter: github-actions

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_target_release.outputs.tag }}
        draft: false
        prerelease: false
        target_commitish: ${{ steps.get_target_commit.outputs.sha }}
        token: ${{ secrets.WORKFLOW_USER_GH_TOKEN }}
        generate_release_notes: false

